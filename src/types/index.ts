
// Note: This User type is now for our application's representation.
// The Supabase Auth user object has its own structure.
// We'll often combine Supabase Auth user with data from a 'profiles' table.
export type UserRole = 'admin' | 'manager' | 'vendor' | 'store';

export interface User {
  id: string; // This will be the Supabase Auth user ID
  email: string;
  app_role: UserRole; // Application-specific role
  user_name: string; // Application-specific display name
  store_name?: string; // For 'store' or 'vendor' roles, can represent the company/store name
  // Password is not stored here anymore, it's handled by Supabase Auth
}

export interface Event {
  id: string;
  name: string;
  date: string; // ISO string
  time: string; // e.g., "10:00 AM - 5:00 PM"
  location: string;
  address: string; // For map
  mapEmbedUrl: string;
  vendorGuideUrl?: string; // Data URL for vendor PDF guide
  associateGuideUrl?: string; // Data URL for associate PDF guide
}

export interface PositivationDetail {
  vendorId: string; // ID of the Vendor company
  vendorName: string; // Name of the Vendor company
  vendorLogoUrl: string; // Logo of the Vendor company
  date: string; // ISO string
  salespersonId?: string; // ID of the Salesperson User who performed the positivation (Supabase Auth user ID)
  salespersonName?: string; // Name of the Salesperson User who performed the positivation
}

export interface Store {
  id: string; // UUID generated by Supabase
  code: string; // Código da loja
  name: string; // Razão Social
  cnpj: string; // CNPJ da loja
  participating: boolean;
  // currentTier will be calculated dynamically based on positivations
  // goalProgress might be deprecated or recalculated
  positivationsDetails: PositivationDetail[]; // This might become a separate table or a JSONB field
  isCheckedIn: boolean;
  address?: string;
  city?: string;
  neighborhood?: string;
  state?: string; // e.g., "PR" or "SC"
  phone?: string;
  ownerName?: string;
  responsibleName?: string; // Name of the person responsible for the store's system login
  email?: string; // Contact email for the store, not necessarily the login email
  user_id?: string; // FK to Supabase auth.users.id (for the store's login user)
  isMatrix: boolean;
  matrixStoreId?: string; // FK to stores.id if it's a branch
}

export interface AwardTier {
  id: string; // UUID generated by Supabase
  name: string; // Nome da faixa
  rewardName: string; // Nome do prêmio
  quantityAvailable: number; // Quantidade de prêmios disponíveis
  positivacoesRequired: {
    PR: number;
    SC: number;
  };
  sortOrder: number;
  // event_id might be useful if tiers are event-specific
}

// Positivacao table will likely be:
// id (PK), store_id (FK to stores), vendor_id (FK to vendors), salesperson_user_id (FK to auth.users), event_id (FK to events), created_at
// This interface represents the concept, not necessarily a direct table structure if embedded.


export interface SweepstakeEntry { // This type might be more conceptual for the logic
  storeId: string;
  storeName: string;
  qualificationRate: number;
}

export interface SweepstakeResult extends SweepstakeEntry { // Also conceptual
  prize: string;
}

export interface Vendor { // Represents the Vendor Company
  id: string; // UUID generated by Supabase
  name: string;
  cnpj: string;
  address: string;
  city: string;
  neighborhood: string;
  state: string;
  logoUrl: string;
  website?: string;
  // user_id for a primary contact/admin of the vendor company could be added, FK to auth.users
}

// Salesperson concept is now directly tied to a User with role 'vendor'.
// The User type (AuthenticatedUser in useAuth) will have a vendor_id in their profile
// if their app_role is 'vendor'.
// The MOCK_SALESPEOPLE will need to be rethought; salespeople are now Users.

export interface SweepstakeWinnerRecord {
  id: string; // Unique ID for this specific win (UUID from Supabase)
  tierId: string; // FK to award_tiers.id
  tierName: string; // Denormalized for easy display
  prizeName: string; // Denormalized
  storeId: string; // FK to stores.id
  storeName: string; // Denormalized (Code, Name, CNPJ, State)
  drawnAt: Date | string; // Timestamp of when the draw occurred
  // event_id might be useful
}

// New: Profile table structure (to complement Supabase auth.users)
export interface Profile {
  id: string; // FK to auth.users.id (primary key)
  role: UserRole;
  name: string;
  store_name?: string; // If role is 'store' or 'vendor', this is their company/store name
  // vendor_id?: string; // FK to vendors.id if role is 'vendor' (salesperson)
  // store_id?: string; // FK to stores.id if role is 'store' (store login)
  updated_at?: string;
}
